// Thread for the Simulator listening server
//
//

#ifndef SIMULATORBASE_H
#define SIMULATORBASE_H

#include "Components.h"
#include "SocketClass3.h"

class SimulatorBaseThread
{
public:
	SimulatorBaseThread();
	~SimulatorBaseThread();

	char LogBuffer[2048];  //Holds a constructed log message generated by this thread

	unsigned long ThreadID;      //ID of the created thread

	char RecBuf[64];     //Holds the receiving data, most likely the HTTP GET request for a file.
	char SendBuf[64];    //Holds the data that will be sent back to the client

	long RecBytes;       //The number of bytes received from the last message
	long TotalRecBytes;  //The total number of bytes received since the server was launched

	long SendBytes;       //The number of bytes sent on the last message
	long TotalSendBytes;  //The total number of bytes sent since the server was launched

	bool isExist;         //If true, the thread exists.  If it doesn't, the main program should attempt to reactivate it.
	bool isActive;        //If true, the is active and running.
	int Status;           //This maintains the activity Status, determining whether it needs to Init, Restart, etc.

	int HomePort;
	char HomePortStr[12];     //The port to use for listening
	char BindAddress[128];

	SocketClass sc;       //Controls the socket connection for this thread.

	int InternalIndex;    //A user defined value to identify this instance index in order to assist in diagnostics
	int GlobalThreadID;   //A unique application-defined thread ID for debugging purposes.

	int MessageCountRec;

	void RunMainLoop(void);
	void SetBindAddress(const char *address);
	void SetHomePort(int port);
	int InitThread(int instanceindex, int globalThreadID);
	void OnConnect(void);  //Called once a connection has been madevoid HTTPBaseThread :: Shutdown(void)
	void Shutdown(void);   //Force a complete shutdown, thread too
	void ResetValues(bool fullRestart);
	void Restart(void);
	void CheckAutoResponse(void);

	int LaunchSimulatorThread(void);
};

extern SimulatorBaseThread SimulatorBase;

#endif //SIMULATORBASE_H
